{"version":3,"file":"popup.js","mappings":"mBAEA,IAAMA,EAAOC,SAASC,iBAAiB,eACjCC,EAAcF,SAASC,iBAAiB,gBACxCE,EAAcH,SAASI,eAAe,gBAEtCC,EAAkBL,SAASI,eAAe,cAC1CE,EAAoBN,SAASI,eAAe,aAC5CG,EAAyBP,SAASI,eAAe,kBACjDI,EAAmBR,SAASI,eAAe,eAC3CK,EAAyBT,SAASI,eAAe,qBACjDM,EAAqBV,SAASI,eAAe,sBAE7CO,EAAM,IAAIC,KAAKC,mBAAmB,KAAM,CAAEC,QAAS,SAwCzD,SAASC,EAAWC,GACF,SAAVA,EACAhB,SAASiB,KAAKC,aAAa,aAAc,QAEzClB,SAASiB,KAAKE,gBAAgB,aAEtC,CA3CAC,OAAOC,QAAQC,KAAKC,IAAI,CAAC,WAAY,UAAU,SAAAC,GAC3C,IAAMC,EAAqBD,EAAOC,SAIlCV,EADmBS,EAAOR,OAAS,SAGnCX,EAAgBqB,MAAQD,EAASE,YACjCrB,EAAkBsB,QAAUH,EAASI,WACrCtB,EAAuBqB,QAAUH,EAASK,gBAC1CtB,EAAiBkB,MAAQD,EAASM,cAClCtB,EAAuBiB,MAAQD,EAASO,uBAAuBC,WAG/Db,OAAOc,OAAOX,IAAI,YAAY,SAAAY,GAC1B,GAAIA,EAAO,CACP,IAAMC,EAAe,IAAIC,KAAKF,EAAMG,eAC9BC,EAAMF,KAAKE,MACXC,EAAeC,KAAKC,OAAON,EAAaO,UAAYJ,GAAO,IAAO,IAEpEK,EAAWjC,EAAIkC,OAAOL,EAAc,WAExC9B,EAAmBoC,YAAc,gBAAHC,OAAmBH,EACrD,CACJ,GACJ,IAGAzC,EAAY6C,iBAAiB,SAAS,SAAAC,GAClCA,EAAEC,2BAIFnC,EAFkC,WADbf,SAASiB,KAAKkC,aAAa,eAAiB,SACrB,OAAS,QAGzD,IAYA,IAAMC,EAAe,WACjB,IAAM3B,EAAqB,CACvBE,YAAatB,EAAgBqB,MAC7BG,WAAYvB,EAAkBsB,QAC9BE,gBAAiBvB,EAAuBqB,QACxCI,uBAAwBqB,SAAS5C,EAAuBiB,MAAO,IAC/DK,cAAevB,EAAiBkB,OAEpCN,OAAOC,QAAQC,KAAKgC,IAAI,CAAE7B,SAAAA,GAC9B,EAGApB,EAAgB2C,iBAAiB,QAASI,GAC1C9C,EAAkB0C,iBAAiB,SAAUI,GAC7C7C,EAAuByC,iBAAiB,SAAUI,GAClD5C,EAAiBwC,iBAAiB,QAASI,GAC3C3C,EAAuBuC,iBAAiB,UAAU,WAC9CI,IAGAhC,OAAOc,OAAOX,IAAI,YAAY,SAAAY,GACtBA,IACAf,OAAOc,OAAOqB,MAAM,YACpBnC,OAAOc,OAAOsB,OAAO,WAAY,CAAEC,gBAAiBJ,SAAS5C,EAAuBiB,MAAO,MAEnG,GACJ,IAGA3B,EAAK2D,SAAQ,SAAAC,GACTA,EAAIX,iBAAiB,SAAS,WAC1BjD,EAAK2D,SAAQ,SAAAE,GAAC,OAAIA,EAAEC,UAAUC,OAAO,SAAS,IAC9CH,EAAIE,UAAUE,IAAI,UAElB,IAAMC,EAAYL,EAAIR,aAAa,YACnCjD,EAAYwD,SAAQ,SAAAO,GAChBA,EAAQJ,UAAUC,OAAO,UACrBG,EAAQC,KAAOF,GACfC,EAAQJ,UAAUE,IAAI,SAE9B,GACJ,GACJ,G","sources":["webpack://schoolbox-chrome-extension/./src/popup/popup.ts"],"sourcesContent":["import { Settings } from \"../types/settings\"\n\nconst tabs = document.querySelectorAll(\".tab-button\") as NodeListOf<HTMLButtonElement>\nconst tabContents = document.querySelectorAll(\".tab-content\") as NodeListOf<HTMLElement>\nconst themeToggle = document.getElementById(\"theme-toggle\") as HTMLButtonElement\n\nconst mainDomainInput = document.getElementById(\"mainDomain\") as HTMLInputElement\nconst injectCssCheckbox = document.getElementById(\"injectCss\") as HTMLInputElement\nconst launcherModuleCheckbox = document.getElementById(\"launcherModule\") as HTMLInputElement\nconst newsRssFeedInput = document.getElementById(\"newsRssFeed\") as HTMLInputElement\nconst RssPullFrequencySelect = document.getElementById(\"RssFetchFrequency\") as HTMLSelectElement\nconst rss_next_pull_time = document.getElementById(\"rss-next-pull-time\") as HTMLSpanElement\n\nconst rtf = new Intl.RelativeTimeFormat(\"en\", { numeric: \"auto\" })\n\n// Load settings\nchrome.storage.sync.get([\"settings\", \"theme\"], result => {\n    const settings: Settings = result.settings\n\n    // Load saved theme or default to light\n    const savedTheme = result.theme || \"light\"\n    applyTheme(savedTheme)\n\n    mainDomainInput.value = settings.main_domain\n    injectCssCheckbox.checked = settings.inject_css\n    launcherModuleCheckbox.checked = settings.launcher_module\n    newsRssFeedInput.value = settings.news_rss_feed\n    RssPullFrequencySelect.value = settings.rss_feed_pull_interval.toString()\n\n    // Load last pulled time from the last time the chrome alarm was triggered\n    chrome.alarms.get(\"rss_poll\", alarm => {\n        if (alarm) {\n            const nextPullTime = new Date(alarm.scheduledTime)\n            const now = Date.now()\n            const diff_minutes = Math.floor((nextPullTime.getTime() - now) / 1000 / 60)\n\n            let time_ago = rtf.format(diff_minutes, \"minutes\")\n\n            rss_next_pull_time.textContent = `Next pull in ${time_ago}`\n        }\n    })\n})\n\n// Theme toggle functionality\nthemeToggle.addEventListener(\"click\", e => {\n    e.stopImmediatePropagation()\n    const currentTheme = document.body.getAttribute(\"data-theme\") || \"light\"\n    const newTheme = currentTheme === \"light\" ? \"dark\" : \"light\"\n\n    applyTheme(newTheme)\n})\n\n// Apply theme to document\nfunction applyTheme(theme: string) {\n    if (theme === \"dark\") {\n        document.body.setAttribute(\"data-theme\", \"dark\")\n    } else {\n        document.body.removeAttribute(\"data-theme\")\n    }\n}\n\n// Save settings function\nconst saveSettings = () => {\n    const settings: Settings = {\n        main_domain: mainDomainInput.value,\n        inject_css: injectCssCheckbox.checked,\n        launcher_module: launcherModuleCheckbox.checked,\n        rss_feed_pull_interval: parseInt(RssPullFrequencySelect.value, 10),\n        news_rss_feed: newsRssFeedInput.value,\n    }\n    chrome.storage.sync.set({ settings })\n}\n\n// Add event listeners for autosave\nmainDomainInput.addEventListener(\"input\", saveSettings)\ninjectCssCheckbox.addEventListener(\"change\", saveSettings)\nlauncherModuleCheckbox.addEventListener(\"change\", saveSettings)\nnewsRssFeedInput.addEventListener(\"input\", saveSettings)\nRssPullFrequencySelect.addEventListener(\"change\", () => {\n    saveSettings()\n\n    // update he chrome alarm for the new fetch frequency\n    chrome.alarms.get(\"rss_poll\", alarm => {\n        if (alarm) {\n            chrome.alarms.clear(\"rss_poll\")\n            chrome.alarms.create(\"rss_poll\", { periodInMinutes: parseInt(RssPullFrequencySelect.value, 10) })\n        }\n    })\n})\n\n// Tab switching logic\ntabs.forEach(tab => {\n    tab.addEventListener(\"click\", () => {\n        tabs.forEach(t => t.classList.remove(\"active\"))\n        tab.classList.add(\"active\")\n\n        const targetTab = tab.getAttribute(\"data-tab\")\n        tabContents.forEach(content => {\n            content.classList.remove(\"active\")\n            if (content.id === targetTab) {\n                content.classList.add(\"active\")\n            }\n        })\n    })\n})\n"],"names":["tabs","document","querySelectorAll","tabContents","themeToggle","getElementById","mainDomainInput","injectCssCheckbox","launcherModuleCheckbox","newsRssFeedInput","RssPullFrequencySelect","rss_next_pull_time","rtf","Intl","RelativeTimeFormat","numeric","applyTheme","theme","body","setAttribute","removeAttribute","chrome","storage","sync","get","result","settings","value","main_domain","checked","inject_css","launcher_module","news_rss_feed","rss_feed_pull_interval","toString","alarms","alarm","nextPullTime","Date","scheduledTime","now","diff_minutes","Math","floor","getTime","time_ago","format","textContent","concat","addEventListener","e","stopImmediatePropagation","getAttribute","saveSettings","parseInt","set","clear","create","periodInMinutes","forEach","tab","t","classList","remove","add","targetTab","content","id"],"sourceRoot":""}